// <auto-generated />
using System;
using Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250430081308_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("Models.CTD_Data.CTDData", b =>
                {
                    b.Property<int>("CtdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("DepthM")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("MeasurementTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("Oxygen")
                        .HasColumnType("REAL");

                    b.Property<double>("Ph")
                        .HasColumnType("REAL");

                    b.Property<double>("Salinity")
                        .HasColumnType("REAL");

                    b.Property<int>("StationId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TemperatureC")
                        .HasColumnType("REAL");

                    b.HasKey("CtdId");

                    b.HasIndex("StationId");

                    b.ToTable("CtdDataSet", t =>
                        {
                            t.HasCheckConstraint("CK_CTD_Oxygen", "[Oxygen] >= 0 AND [Oxygen] <= 20");

                            t.HasCheckConstraint("CK_CTD_Ph", "[Ph] >= 0 AND [Ph] <= 14");

                            t.HasCheckConstraint("CK_CTD_Salinity", "[Salinity] >= 0 AND [Salinity] <= 60");

                            t.HasCheckConstraint("CK_CTD_Temperature", "[TemperatureC] >= -5 AND [TemperatureC] <= 40");
                        });
                });

            modelBuilder.Entity("Models.Contractors.ContractStatus", b =>
                {
                    b.Property<int>("ContractStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContractStatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ContractStatusId");

                    b.ToTable("ContractStatuses");
                });

            modelBuilder.Entity("Models.Contractors.ContractType", b =>
                {
                    b.Property<int>("ContractTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContractTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ContractTypeId");

                    b.ToTable("ContractTypes");
                });

            modelBuilder.Entity("Models.Contractors.Contractor", b =>
                {
                    b.Property<int>("ContractorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("ContractStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContractorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("ContractualYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SponsoringState")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ContractorId");

                    b.HasIndex("ContractStatusId");

                    b.HasIndex("ContractTypeId");

                    b.ToTable("Contractors");
                });

            modelBuilder.Entity("Models.Contractors.ContractorArea", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AllocationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("AreaDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<double>("CenterLatitude")
                        .HasColumnType("REAL");

                    b.Property<double>("CenterLongitude")
                        .HasColumnType("REAL");

                    b.Property<int>("ContractorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("GeoJsonBoundary")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalAreaSizeKm2")
                        .HasColumnType("REAL");

                    b.HasKey("AreaId");

                    b.HasIndex("ContractorId");

                    b.ToTable("ContractorAreas");
                });

            modelBuilder.Entity("Models.Contractors.ContractorAreaBlock", b =>
                {
                    b.Property<int>("BlockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AreaId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("AreaSizeKm2")
                        .HasColumnType("REAL");

                    b.Property<string>("BlockDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BlockName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<double>("CenterLatitude")
                        .HasColumnType("REAL");

                    b.Property<double>("CenterLongitude")
                        .HasColumnType("REAL");

                    b.Property<double>("EconomicValue")
                        .HasColumnType("REAL");

                    b.Property<string>("GeoJsonBoundary")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("ResourceDensity")
                        .HasColumnType("REAL");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("BlockId");

                    b.HasIndex("AreaId");

                    b.ToTable("ContractorAreaBlocks");
                });

            modelBuilder.Entity("Models.Cruises.Cruise", b =>
                {
                    b.Property<int>("CruiseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CruiseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResearchVessel")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("CruiseId");

                    b.HasIndex("ContractorId");

                    b.ToTable("Cruises");
                });

            modelBuilder.Entity("Models.Env_Result.EnvResult", b =>
                {
                    b.Property<int>("EnvResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnalysisCategory")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AnalysisName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("AnalysisValue")
                        .HasColumnType("REAL");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("EnvResultId");

                    b.HasIndex("SampleId");

                    b.ToTable("EnvResults");
                });

            modelBuilder.Entity("Models.Geo_result.GeoResult", b =>
                {
                    b.Property<int>("GeoResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Analysis")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Qualifier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("GeoResultId");

                    b.HasIndex("SampleId");

                    b.ToTable("GeoResults");
                });

            modelBuilder.Entity("Models.Librarys.Library", b =>
                {
                    b.Property<int>("LibraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("LibraryId");

                    b.HasIndex("ContractorId");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("Models.Photo_Video.PhotoVideo", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CameraSpecs")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CaptureDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<int>("SampleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MediaId");

                    b.HasIndex("SampleId");

                    b.ToTable("PhotoVideos");
                });

            modelBuilder.Entity("Models.Qualifiers.Qualifier", b =>
                {
                    b.Property<int>("QualifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("QualifierCode")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("QualifierDefinition")
                        .HasColumnType("TEXT");

                    b.HasKey("QualifierId");

                    b.ToTable("Qualifiers");
                });

            modelBuilder.Entity("Models.Samples.Sample", b =>
                {
                    b.Property<int>("SampleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Analysis")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("DepthLower")
                        .HasColumnType("REAL");

                    b.Property<double>("DepthUpper")
                        .HasColumnType("REAL");

                    b.Property<string>("HabitatType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("MatrixType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("Result")
                        .HasColumnType("REAL");

                    b.Property<string>("SampleCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SampleDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SampleType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SamplingDevice")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("StationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SampleId");

                    b.HasIndex("StationId");

                    b.ToTable("Samples", t =>
                        {
                            t.HasCheckConstraint("CK_Sample_Depth", "[DepthUpper] > [DepthLower]");
                        });
                });

            modelBuilder.Entity("Models.Stations.Station", b =>
                {
                    b.Property<int>("StationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContractorAreaBlockId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CruiseId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("StationType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("StationId");

                    b.HasIndex("ContractorAreaBlockId");

                    b.HasIndex("CruiseId");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("Models.Valid_Value.ValidValue", b =>
                {
                    b.Property<int>("ValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ValidValueName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ValueId");

                    b.ToTable("ValidValues");
                });

            modelBuilder.Entity("Models.CTD_Data.CTDData", b =>
                {
                    b.HasOne("Models.Stations.Station", "Station")
                        .WithMany("CtdDataSet")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Models.Contractors.Contractor", b =>
                {
                    b.HasOne("Models.Contractors.ContractStatus", "ContractStatus")
                        .WithMany("Contractors")
                        .HasForeignKey("ContractStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Contractors.ContractType", "ContractType")
                        .WithMany("Contractors")
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContractStatus");

                    b.Navigation("ContractType");
                });

            modelBuilder.Entity("Models.Contractors.ContractorArea", b =>
                {
                    b.HasOne("Models.Contractors.Contractor", "Contractor")
                        .WithMany("ContractorAreas")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("Models.Contractors.ContractorAreaBlock", b =>
                {
                    b.HasOne("Models.Contractors.ContractorArea", "ContractorArea")
                        .WithMany("ContractorAreaBlocks")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractorArea");
                });

            modelBuilder.Entity("Models.Cruises.Cruise", b =>
                {
                    b.HasOne("Models.Contractors.Contractor", "Contractor")
                        .WithMany("Cruises")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("Models.Env_Result.EnvResult", b =>
                {
                    b.HasOne("Models.Samples.Sample", "Sample")
                        .WithMany("EnvResults")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("Models.Geo_result.GeoResult", b =>
                {
                    b.HasOne("Models.Samples.Sample", "Sample")
                        .WithMany("GeoResults")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("Models.Librarys.Library", b =>
                {
                    b.HasOne("Models.Contractors.Contractor", "Contractor")
                        .WithMany("Libraries")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("Models.Photo_Video.PhotoVideo", b =>
                {
                    b.HasOne("Models.Samples.Sample", "Sample")
                        .WithMany("PhotoVideos")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("Models.Samples.Sample", b =>
                {
                    b.HasOne("Models.Stations.Station", "Station")
                        .WithMany("Samples")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Models.Stations.Station", b =>
                {
                    b.HasOne("Models.Contractors.ContractorAreaBlock", "ContractorAreaBlock")
                        .WithMany()
                        .HasForeignKey("ContractorAreaBlockId");

                    b.HasOne("Models.Cruises.Cruise", "Cruise")
                        .WithMany("Stations")
                        .HasForeignKey("CruiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractorAreaBlock");

                    b.Navigation("Cruise");
                });

            modelBuilder.Entity("Models.Contractors.ContractStatus", b =>
                {
                    b.Navigation("Contractors");
                });

            modelBuilder.Entity("Models.Contractors.ContractType", b =>
                {
                    b.Navigation("Contractors");
                });

            modelBuilder.Entity("Models.Contractors.Contractor", b =>
                {
                    b.Navigation("ContractorAreas");

                    b.Navigation("Cruises");

                    b.Navigation("Libraries");
                });

            modelBuilder.Entity("Models.Contractors.ContractorArea", b =>
                {
                    b.Navigation("ContractorAreaBlocks");
                });

            modelBuilder.Entity("Models.Cruises.Cruise", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("Models.Samples.Sample", b =>
                {
                    b.Navigation("EnvResults");

                    b.Navigation("GeoResults");

                    b.Navigation("PhotoVideos");
                });

            modelBuilder.Entity("Models.Stations.Station", b =>
                {
                    b.Navigation("CtdDataSet");

                    b.Navigation("Samples");
                });
#pragma warning restore 612, 618
        }
    }
}
